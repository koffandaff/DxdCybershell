#!/bin/bash
trap ctrl_c INT

# Color Definitions
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
PURPLE='\033[1;35m'
CYAN='\033[1;36m'
NC='\033[0m' # No Color

function ctrl_c() {
    echo -e "\n${RED}Detected Ctrl+C — Exiting cleanly...${NC}"
    exit
}

# Banner with colors
echo -e "${BLUE}
  ██╗  ██╗ ██████╗ ███████╗███████╗ █████╗ ███╗   ██╗
  ██║ ██╔╝██╔═══██╗██╔════╝██╔════╝██╔══██╗████╗  ██║
  █████╔╝ ██║   ██║█████╗  █████╗  ███████║██╔██╗ ██║
  ██╔═██╗ ██║   ██║██╔══╝  ██╔══╝  ██╔══██║██║╚██╗██║
  ██║  ██╗╚██████╔╝██║     ██║     ██║  ██║██║ ╚████║
  ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝
  ${PURPLE}Dxd v2.0 | By Koffan${NC}
"

echo -e "${YELLOW}!!! ${CYAN}This Tool is Made by Cheif Dhruvil used For system Monitoring, Infogathering,"
echo -e "${CYAN}!!! Phising Detection and SQL Injection ${NC}"
echo -e "${YELLOW}!!! ${RED}Only for education purpose. Use tool respectfully${NC}\n"

echo -e "${GREEN}Use Numbers to navigate through Menu${NC}"
echo -e "${CYAN}Python libraries you might need: whois, requests, tldextract${NC}\n"

sysarr=("top -b -n 1 -o %CPU" "df -h" "free -h" "vmstat -s" "cat /proc/meminfo" "ss -tulnp" "netstat -s" "uptime")
infoarr=("whois" "dig" "nslookup" "traceroute -m 25" "theHarvester")

while true; do 
    echo -e "\n${PURPLE}Main Menu:${NC}"
    echo -e "${GREEN}1. System Monitor${NC}"
    echo -e "${GREEN}2. Infogathering${NC}"
    echo -e "${GREEN}3. Detect a Phishing site${NC}"
    echo -e "${RED}4. SQL Injection Scanner${NC}"
    echo -e "${YELLOW}5. Exit${NC}"
    read -p "$(echo -e ${BLUE}"Select an option: "${NC})" n
    echo ""

    case "$n" in
        1)
            while true; do
                echo -e "\n${CYAN}System Monitor:${NC}"
                echo -e "${GREEN}1. Show all running processes and threads${NC}"
                echo -e "${GREEN}2. Show disk usage and availability${NC}"
                echo -e "${GREEN}3. Show memory usage and free space${NC}"
                echo -e "${YELLOW}4. Detailed memory statistics${NC}"
                echo -e "${YELLOW}5. Complete memory information${NC}"
                echo -e "${BLUE}6. Show listening ports and processes${NC}"
                echo -e "${BLUE}7. Show network statistics${NC}"
                echo -e "${PURPLE}8. Show system load and uptime${NC}"
                echo -e "${RED}9. Perform all checks${NC}"
                echo -e "${YELLOW}10. Back to main menu${NC}"
                read -p "$(echo -e ${BLUE}"Select system option: "${NC})" sys

                case "$sys" in
                    1) echo -e "\n${CYAN}Running Processes:${NC}"; ${sysarr[0]};;
                    2) echo -e "\n${CYAN}Disk Usage:${NC}"; ${sysarr[1]};;
                    3) echo -e "\n${CYAN}Memory Usage:${NC}"; ${sysarr[2]};;
                    4) echo -e "\n${CYAN}Detailed Memory Stats:${NC}"; ${sysarr[3]};;
                    5) echo -e "\n${CYAN}Complete Memory Info:${NC}"; ${sysarr[4]};;
                    6) echo -e "\n${CYAN}Listening Ports:${NC}"; ${sysarr[5]};;
                    7) echo -e "\n${CYAN}Network Stats:${NC}"; ${sysarr[6]};;
                    8) echo -e "\n${CYAN}System Uptime:${NC}"; ${sysarr[7]};;
                    9)
                        echo -e "\n${RED}Running all system checks...${NC}"
                        for cmd in "${sysarr[@]}"; do
                            echo -e "\n${YELLOW}Running: $cmd${NC}"
                            eval "$cmd"
                        done
                        ;;
                    10) break;;
                    *) echo -e "${RED}Invalid option!${NC}";;
                esac
            done
            ;;

        2)
            read -p "$(echo -e ${BLUE}"Enter site/IP to investigate: "${NC})" site
            echo ""

            while true; do
                echo -e "\n${CYAN}Infogathering Options for $site:${NC}"
                echo -e "${GREEN}1. Domain details and history${NC}"
                echo -e "${GREEN}2. Find IP addresses${NC}"
                echo -e "${GREEN}3. Advanced DNS lookup${NC}"
                echo -e "${YELLOW}4. Site creation date${NC}"
                echo -e "${YELLOW}5. Trace route (max 25 hops)${NC}"
                echo -e "${RED}6. Deep email/subdomain scan${NC}"
                echo -e "${PURPLE}7. Perform all investigations${NC}"
                echo -e "${YELLOW}8. Back to main menu${NC}"
                read -p "$(echo -e ${BLUE}"Select option: "${NC})" info

                case "$info" in
                    1) echo -e "\n${CYAN}Domain Details:${NC}"; ${infoarr[0]} "$site";;
                    2) echo -e "\n${CYAN}IP Addresses:${NC}"; ${infoarr[2]} "$site" | grep "Address";;
                    3) echo -e "\n${CYAN}DNS Lookup:${NC}"; ${infoarr[1]} "$site";;
                    4) echo -e "\n${CYAN}Creation Date:${NC}"; ${infoarr[0]} "$site" | grep "Creation";;
                    5) echo -e "\n${CYAN}Traceroute:${NC}"; ${infoarr[3]} "$site";;
                    6)
                        echo -e "\n${RED}Deep Email/Subdomain Scan:${NC}"
                        echo -e "${YELLOW}This may take several minutes...${NC}"
                        ${infoarr[4]} -d "$site" -b bing -l 100
                        ;;
                    7)
                        echo -e "\n${PURPLE}Running all investigations...${NC}"
                        for cmd in "${infoarr[@]}"; do
                            echo -e "\n${YELLOW}Running: $cmd${NC}"
                            eval "$cmd" "$site"
                        done
                        ;;
                    8) break;;
                    *) echo -e "${RED}Invalid option!${NC}";;
                esac
            done
            ;;

        3)
            echo -e "\n${RED}Phishing Detection Module${NC}"
            echo -e "${YELLOW}Ignore any warnings - just enter the URL${NC}"
            python3 phishingdetection.py
            ;;

        4)
            echo -e "\n${RED}▓▓▓ SQL Injection Scanner ▓▓▓${NC}"
            echo -e "${YELLOW}Note: Always use https:// in URLs for secure testing${NC}"
            echo -e "${CYAN}To get cookies:"
            echo -e "1. Open browser Developer Tools (F12)"
            echo -e "2. Go to Application/Storage > Cookies"
            echo -e "3. Copy entire cookie string${NC}\n"
            
            read -p "$(echo -e ${BLUE}"Enter target URL (e.g., https://example.com/page?id=1): "${NC})" sqli_url
            read -p "$(echo -e ${BLUE}"Enter cookies (leave empty if none): "${NC})" sqli_cookies
            read -p "$(echo -e ${BLUE}"Enter security level (low/medium/high, leave empty for default): "${NC})" sqli_level
            
            base_cmd="sqlmap -u \"$sqli_url\""
            [ ! -z "$sqli_cookies" ] && base_cmd="$base_cmd --cookie=\"$sqli_cookies\""
            [ ! -z "$sqli_level" ] && base_cmd="$base_cmd --level=$sqli_level"
            
            while true; do
                echo -e "\n${PURPLE}SQL Injection Options:${NC}"
                echo -e "${GREEN}1. Discover vulnerabilities (batch)${NC}"
                echo -e "${GREEN}2. Crawl site for vulnerabilities${NC}"
                echo -e "${YELLOW}3. List all databases${NC}"
                echo -e "${YELLOW}4. Extract tables from database${NC}"
                echo -e "${RED}5. Get SQL shell access${NC}"
                echo -e "${RED}6. Dump all data${NC}"
                echo -e "${CYAN}7. Wizard mode (beginner)${NC}"
                echo -e "${BLUE}8. List tamper scripts${NC}"
                echo -e "${BLUE}9. Deploy payload with tamper${NC}"
                echo -e "${YELLOW}10. Back to main menu${NC}"
                read -p "$(echo -e ${BLUE}"Select SQL option: "${NC})" sqlopt

                case "$sqlopt" in
                    1) eval "$base_cmd --batch";;
                    2) eval "$base_cmd --crawl=2 --batch";;
                    3) eval "$base_cmd --dbs --batch";;
                    4)
                        read -p "$(echo -e ${BLUE}"Enter database name: "${NC})" db_name
                        eval "$base_cmd -D $db_name --tables --batch"
                        ;;
                    5) eval "$base_cmd --sql-shell --batch";;
                    6)
                        read -p "$(echo -e ${BLUE}"Enter database name: "${NC})" db_name
                        read -p "$(echo -e ${BLUE}"Enter table name: "${NC})" table_name
                        eval "$base_cmd -D $db_name -T $table_name --dump --batch"
                        ;;
                    7) eval "$base_cmd --wizard";;
                    8) sqlmap --list-tampers | grep -v '[.]' | grep -v '^$' | column;;
                    9)
                        read -p "$(echo -e ${BLUE}"Enter tamper script name: "${NC})" tamper_name
                        eval "$base_cmd --tamper=$tamper_name --batch"
                        ;;
                    10) break;;
                    *) echo -e "${RED}Invalid option!${NC}";;
                esac
            done
            ;;

        5)
            echo -e "\n${YELLOW}Thanks for using this tool. Logging off...${NC}"
            exit
            ;;

        *)
            echo -e "${RED}Invalid option! Please choose 1-5${NC}"
            ;;
    esac
done
